const maxRowsPerColumn = 50;

// Event listeners for adding size column and specifying number of rows
document.getElementById('size-input').addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
        const size = event.target.value.trim().toUpperCase();
        const times = parseInt(document.getElementById('size-times').value) || 1; // Default to 1 if not specified
        if (size) {
            addSizeColumn(size, times);
            event.target.value = ''; // Clear the size input field
            document.getElementById('size-times').value = ''; // Clear the times input field
        }
    }
});

document.getElementById('size-times').addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
        const times = parseInt(event.target.value) || 1;
        const size = document.getElementById('size-input').value.trim().toUpperCase();
        if (size) {
            addSizeColumn(size, times);
            document.getElementById('size-input').value = ''; // Clear the size input field
            event.target.value = ''; // Clear the times input field
        }
    }
});

// Function to add a column with the specified number of rows
function addSizeColumn(size, times) {
    if (document.getElementById(`column-${size}`)) {
        alert(`Column for size ${size} already exists.`);
        return;
    }

    const container = document.getElementById('column-container');
    const columnDiv = document.createElement('div');
    columnDiv.classList.add('mb-3', 'size-column');
    columnDiv.id = `column-${size}`;
    columnDiv.style.maxHeight = '600px';
    columnDiv.style.overflowY = 'auto';
    columnDiv.style.fontSize = '13px';
    columnDiv.style.color = 'purple';
    columnDiv.style.border = '1px solid #ddd'; 
    columnDiv.style.backgroundColor = '#c1d5f5';

    const columnHeader = document.createElement('div');
    columnHeader.classList.add('input-header');
    columnHeader.style.display = 'flex';
    columnHeader.style.justifyContent = 'space-between';
    columnHeader.style.position = 'sticky';
    columnHeader.style.top = '0';
    columnHeader.style.backgroundColor = '#c1d5f5';
    columnHeader.style.zIndex = '10';

    const sizeLabel = document.createElement('span');
    sizeLabel.innerText = `Size: ${size}`;
    sizeLabel.style.textAlign = 'center';
    sizeLabel.style.flex = '1';
    columnHeader.appendChild(sizeLabel);

    const deleteColumnButton = document.createElement('button');
    deleteColumnButton.classList.add('btn', 'btn-sm', 'btn-outline-danger', 'custom-delete-btn');
    deleteColumnButton.innerText = 'x';
    deleteColumnButton.onclick = () => {
        columnDiv.remove();
    };

    columnHeader.append(sizeLabel, deleteColumnButton);
    columnDiv.appendChild(columnHeader);
    container.appendChild(columnDiv);

    // Add the specified number of rows
    for (let i = 0; i < times; i++) {
        addInputRow(size);
    }

    const qtySumLabel = document.createElement('div');
    qtySumLabel.classList.add('qty-sum-label');
    qtySumLabel.innerText = 'Total Qty: 0';
    qtySumLabel.style.fontSize = '12px';
    qtySumLabel.style.fontWeight = 'bold';
    qtySumLabel.style.marginLeft = '30px';
    columnDiv.appendChild(qtySumLabel);
}

// Function to add a single row in the specified column
function addInputRow(size) {
    const columnDiv = document.getElementById(`column-${size}`);
    if (columnDiv.querySelectorAll('.input-row').length >= maxRowsPerColumn) {
        alert(`Maximum of ${maxRowsPerColumn} rows reached for size ${size}.`);
        return;
    }

    const rowDiv = document.createElement('div');
    rowDiv.classList.add('input-row');

    const rowIndex = columnDiv.querySelectorAll('.input-row').length + 1;
    const indexLabel = document.createElement('span');
    indexLabel.classList.add('index-label');
    indexLabel.innerText = `${rowIndex}.`;

    const custGroupInput = createTeamInputField(columnDiv); //('text', 'Team');
    const qtyInput = createQtyInputField(columnDiv);
    const customcolor = createColorInputField(columnDiv); // ('text', 'Color');
    const customLogo = createCustomLogoInputField(columnDiv); // ('text', 'Color'); //Custom Logo
    const customSerialStart = createInputField('number', 'Start');
    const customSerialEnd = createInputField('number', 'End');

    const resetCheckbox = document.createElement('input');
    resetCheckbox.type = 'checkbox';
    resetCheckbox.classList.add('form-check-input');
    resetCheckbox.title = 'Reset Serial';

    const addButton = document.createElement('button');
    addButton.classList.add('btn', 'btn-sm', 'btn-outline-secondary', 'custom-btn');
    addButton.innerText = '+';
    addButton.style.marginRight = '0.5rem';
    addButton.onclick = () => addInputRow(size);

    const deleteButton = document.createElement('button');
    deleteButton.classList.add('btn', 'btn-sm', 'btn-outline-danger');
    deleteButton.innerText = 'x';
    deleteButton.style.padding = '0.2rem 0.5rem';
    deleteButton.style.fontSize = '0.75rem';
    deleteButton.onclick = () => {
        rowDiv.remove();
        if (columnDiv.querySelectorAll('.input-row').length === 0) {
            columnDiv.remove();
        }
        updateQtySum(columnDiv);
    };

    rowDiv.append(indexLabel, custGroupInput, qtyInput, customcolor, customLogo, resetCheckbox, customSerialStart, customSerialEnd, addButton, deleteButton);
    columnDiv.insertBefore(rowDiv, columnDiv.querySelector('.qty-sum-label'));

    updateQtySum(columnDiv);
}


function createTeamInputField(columnDiv) {
    const teamInput = document.createElement('input');
    teamInput.type = 'text';
    teamInput.classList.add('form-control');
    teamInput.placeholder = 'Team';

    teamInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            const teamInputs = Array.from(columnDiv.querySelectorAll('input[placeholder="Team"]'));
            const currentIndex = teamInputs.indexOf(event.target);
            const nextTeamInput = teamInputs[currentIndex + 1];
            if (nextTeamInput) {
                nextTeamInput.focus();
            }
        }
    });

    return teamInput;
}


// Helper function to create a Qty input field with specific behavior
function createQtyInputField(columnDiv) {
    const qtyInput = document.createElement('input');
    qtyInput.type = 'number';
    qtyInput.classList.add('form-control', 'qty-input');
    qtyInput.placeholder = 'Qty';

    qtyInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            const qtyInputs = Array.from(columnDiv.querySelectorAll('.qty-input'));
            const currentIndex = qtyInputs.indexOf(event.target);
            const nextInput = qtyInputs[currentIndex + 1];
            if (nextInput) {
                nextInput.focus();
            }
        }
    });

    qtyInput.addEventListener('input', () => updateQtySum(columnDiv));
    return qtyInput;
}

// Helper function for creating "Color" input field with enter-to-move functionality
function createColorInputField(columnDiv) {
    const customcolor = document.createElement('input');
    customcolor.type = 'text';
    customcolor.classList.add('form-control');
    customcolor.placeholder = 'Color';

    customcolor.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            const customcolors = Array.from(columnDiv.querySelectorAll('input[placeholder="Color"]'));
            const currentIndex = customcolors.indexOf(event.target);
            const nextColorInput = customcolors[currentIndex + 1];
            if (nextColorInput) {
                nextColorInput.focus();
            }
        }
    });

    return customcolor;
}


function createCustomLogoInputField(columnDiv) {
    const customLogo = document.createElement('input');
    customLogo.type = 'text';
    customLogo.classList.add('form-control');
    customLogo.placeholder = 'Logo';

    customLogo.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            const customLogos = Array.from(columnDiv.querySelectorAll('input[placeholder="Logo"]'));
            const currentIndex = customLogos.indexOf(event.target);
            const nextLogoInput = customLogos[currentIndex + 1];
            if (nextLogoInput) {
                nextLogoInput.focus();
            }
        }
    });

    return customLogo;
}


// Helper function to create an input field with a placeholder
function createInputField(type, placeholder) {
    const input = document.createElement('input');
    input.type = type;
    input.classList.add('form-control');
    input.placeholder = placeholder;
    return input;
}

// Function to update the total quantity for each column
function updateQtySum(columnDiv) {
    let sum = 0;
    const qtyInputs = columnDiv.querySelectorAll('.qty-input');
    qtyInputs.forEach(input => {
        sum += parseInt(input.value) || 0;
    });
    const sumLabel = columnDiv.querySelector('.qty-sum-label');
    if (sumLabel) sumLabel.innerText = `Total Qty: ${sum}`;
}

function generateLabels() {
    const container = document.getElementById('column-container');
    const labelOutput = document.getElementById('label-output');
    labelOutput.innerHTML = '';  // Clear the output for fresh labels

    const date = document.getElementById('date')?.value || 'N/A Date';
    const buyer = document.getElementById('buyer')?.value || 'N/A Buyer';
    const style = document.getElementById('style')?.value || 'N/A Style';

    const defaultLogo = document.getElementById('defaultLogo')?.value || 'N/A Logo';
    const useDefaultLogo = document.getElementById('useDefaultLogo')?.checked || false;
    // const logo = document.getElementById('logo')?.value || 'N/A Logo';
    // const customcolor = document.getElementById('custom-color')?.value || 'N/A Color';
    const cut = document.getElementById('cut')?.value || 'N/A Cut';
    const lot = document.getElementById('lot')?.value || 'N/A Lot';
    const item = document.getElementById('item')?.value || 'N/A Item';
    const defaultColor = document.getElementById('defaultColor')?.value || 'N/A Color';
    const useDefaultColor = document.getElementById('useDefaultColor')?.checked || false;
    const tbl = parseInt(document.getElementById('tbl')?.value) || 0;
    const layValue = parseInt(document.getElementById('lay')?.value) || 0;

    // let dataToSend = [];  // Array to store label data for database insertion
    let currentSerials = {};
    let bundleCounter = 1;

    for (let column of container.children) {
        const size = column.id.replace('column-', '');
        if (!currentSerials[size]) currentSerials[size] = 1;

        for (let i = 1; i < column.children.length; i++) {
            const row = column.children[i];
            if (!row.classList.contains('input-row')) continue;

            const custGroupInput = row.children[1].value;
            const qty = parseInt(row.children[2].value);
            const rowCustomColor = row.children[3].value;
            const customLogo = row.children[4].value;
            const resetSerial = row.children[5].checked;

            const customStart = parseInt(row.children[6].value);
            const customEnd = parseInt(row.children[7].value);
            
            const logoToUse = useDefaultLogo ? defaultLogo : (customLogo || defaultLogo);
            const colorToUse = useDefaultColor ? defaultColor : (rowCustomColor || defaultColor); //customcolor

            let serialStart, serialEnd;

            if (!isNaN(customStart) && !isNaN(customEnd) && customEnd >= customStart) {
                serialStart = customStart;
                serialEnd = customEnd;
                currentSerials[size] = customEnd + 1;
            } else if (resetSerial) {
                serialStart = 1;
                serialEnd = qty;
                currentSerials[size] = serialEnd + 1;
            } else {
                serialStart = currentSerials[size];
                serialEnd = serialStart + qty - 1;
                currentSerials[size] = serialEnd + 1;
            }

            // Check for special ply logic if needed
            if (serialEnd >= 100 && (serialEnd % 100) === (layValue % 100)) {
                currentSerials[size] = 201;
            }

            if (!isNaN(qty) && qty > 0) {
                const partRows = document.querySelectorAll('.part-row');
                partRows.forEach(partRow => {
                    const partName = partRow.querySelector('.part-input').value || 'Unknown Part';
                    const partType = partRow.querySelector('input[type="radio"]:checked')?.value || 'Unknown Type';

                    // Add label information to data array
                    // dataToSend.push({
                    //     date,
                    //     buyer,
                    //     style,
                    //     logo: logoToUse,
                    //     color: colorToUse,
                    //     size,
                    //     lot,
                    //     cut,
                    //     item,
                    //     team: custGroupInput,
                    //     part_name: partName,
                    //     part_type: partType,
                    //     serial_start: serialStart,
                    //     serial_end: serialEnd,
                    //     qty
                    // });

                    // Display label in the output area
                    const labelTable = document.createElement('table');
                    labelTable.classList.add('table', 'table-bordered', 'table-sm', 'mb-3');
                    labelTable.innerHTML = `
                        <tr><td>Buyer: ${buyer} ; Style: ${style} ;Tbl:${tbl}</td></tr> 
                        <tr><td>Color: ${colorToUse}; Size: ${size} ; Lot: ${lot}</td></tr>
                        <tr><td>Cut: ${cut} ; Item: ${item} ; Team: ${custGroupInput}</td></tr>
                        <tr><td>Logo: ${logoToUse} ; Part: ${partName}(${partType}) ; Bundle: ${bundleCounter}</td></tr>
                        <tr><td>Serial: ${serialStart}-${serialEnd} ; Qty: ${qty}; ${date}</td></tr>
                    `;
                    labelOutput.appendChild(labelTable);
                });

                // Increment bundleCounter only after each main label generation
                bundleCounter++;
            }
        }
    }

    // Send data to PHP script for database insertion
    
    // fetch('insert_data.php', {
    //     method: 'POST',
    //     headers: {
    //         'Content-Type': 'application/json'
    //     },
    //     body: JSON.stringify(dataToSend)
    // })
    // .then(response => response.text())
    // .then(responseText => {
    //     console.log(responseText); // Show success message in console
    //     alert(responseText); // Display response from PHP
    // })
    // .catch(error => console.error('Error:', error));
}


function saveData(){
    const container = document.getElementById('column-container');
    const date = document.getElementById('date')?.value || 'N/A Date';
    const buyer = document.getElementById('buyer')?.value || 'N/A Buyer';
    const style = document.getElementById('style')?.value || 'N/A Style';

    const defaultLogo = document.getElementById('defaultLogo')?.value || 'N/A Logo';
    const useDefaultLogo = document.getElementById('useDefaultLogo')?.checked || false;
    // const logo = document.getElementById('logo')?.value || 'N/A Logo';
    // const customcolor = document.getElementById('custom-color')?.value || 'N/A Color';
    const cut = document.getElementById('cut')?.value || 'N/A Cut';
    const lot = document.getElementById('lot')?.value || 'N/A Lot';
    const item = document.getElementById('item')?.value || 'N/A Item';
    const defaultColor = document.getElementById('defaultColor')?.value || 'N/A Color';
    const useDefaultColor = document.getElementById('useDefaultColor')?.checked || false;
    const tbl = parseInt(document.getElementById('tbl')?.value) || 0;
    const layValue = parseInt(document.getElementById('lay')?.value) || 0;

    let dataToSend = [];  // Array to store label data for database insertion
    let currentSerials = {};
    let bundleCounter = 1;
    for (let column of container.children) {
        const size = column.id.replace('column-', '');
        if (!currentSerials[size]) currentSerials[size] = 1;

        for (let i = 1; i < column.children.length; i++) {
            const row = column.children[i];
            if (!row.classList.contains('input-row')) continue;

            const custGroupInput = row.children[1].value;
            const qty = parseInt(row.children[2].value);
            const rowCustomColor = row.children[3].value;
            const customLogo = row.children[4].value;
            const resetSerial = row.children[5].checked;

            const customStart = parseInt(row.children[6].value);
            const customEnd = parseInt(row.children[7].value);
            
            const logoToUse = useDefaultLogo ? defaultLogo : (customLogo || defaultLogo);
            const colorToUse = useDefaultColor ? defaultColor : (rowCustomColor || defaultColor); //customcolor

            let serialStart, serialEnd;

            if (!isNaN(customStart) && !isNaN(customEnd) && customEnd >= customStart) {
                serialStart = customStart;
                serialEnd = customEnd;
                currentSerials[size] = customEnd + 1;
            } else if (resetSerial) {
                serialStart = 1;
                serialEnd = qty;
                currentSerials[size] = serialEnd + 1;
        } else {
            serialStart = currentSerials[size];
            serialEnd = serialStart + qty - 1;
            currentSerials[size] = serialEnd + 1;
        }

        // Check for special ply logic if needed
        if (serialEnd >= 100 && (serialEnd % 100) === (layValue % 100)) {
            currentSerials[size] = 201;
        }

        if (!isNaN(qty) && qty > 0) {
            const partRows = document.querySelectorAll('.part-row');
            partRows.forEach(partRow => {
                const partName = partRow.querySelector('.part-input').value || 'Unknown Part';
                const partType = partRow.querySelector('input[type="radio"]:checked')?.value || 'Unknown Type';

                // Add label information to data array
                dataToSend.push({
                    date,
                    buyer,
                    style,
                    tbl,
                    logo: logoToUse,
                    color: colorToUse,
                    size,
                    lot,
                    cut,
                    item,
                    team: custGroupInput,
                    part_name: partName,
                    part_type: partType,
                    bundle: bundleCounter,
                    serial_start: serialStart,
                    serial_end: serialEnd,
                    qty
                });

                

            });

            bundleCounter++;
            
        }
         
      }
        
    
 }

        fetch('insert_data.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dataToSend)
        })
        .then(response => response.text())
        .then(responseText => {
            console.log(responseText); // Show success message in console
            alert(responseText); // Display response from PHP
        })
        .catch(error => console.error('Error:', error));
    
        
}
     
//Label output
function printLabels() {
    generateLabels();
    const labelContent = document.getElementById('label-output').innerHTML;
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = 'generate_pdf.php';
    form.target = '_blank';  // Opens in a new tab or window

    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'labelContent';
    input.value = labelContent;
    form.appendChild(input);

    document.body.appendChild(form);
    form.submit();
}


//chart generation

// function bundle_chart() {
   
//     const form = document.createElement('form');
//     form.method = 'POST';
//     form.action = 'chart.php';
//     form.target = '_blank'; // Opens in a new tab or window

//     const input = document.createElement('input');
//     input.type = 'hidden';
//     // input.name = 'labelContent';
//     // input.value = labelContent;
//     form.appendChild(input);

//     document.body.appendChild(form);
//     form.submit();
    
// }


    // move cursor to next input field in common-informatio

    function moveToNextField(event) {
            if (event.key === "Enter") { // Check if "Enter" key is pressed
                event.preventDefault(); // Prevent form submission
                const inputs = document.querySelectorAll('.form-control');
                const index = Array.from(inputs).indexOf(event.target);
                const nextInput = inputs[index + 1];

                // Focus on the next input if it exists
                if (nextInput) {
                    nextInput.focus();
                }
            }
        }



    // Save inputs on page unload
    window.addEventListener('beforeunload', () => {
        const inputData = document.getElementById('date').value;
        sessionStorage.setItem('savedDate', inputData);
    });

    // Restore inputs on page load
    window.addEventListener('load', () => {
        const savedDate = sessionStorage.getItem('savedDate');
        if (savedDate) {
            document.getElementById('date').value = savedDate;
        }
    });


//  <!-- part-conainer js -->


let rowCount = 0;

function handleKeyPress(event) {
    if (event.key === 'Enter') {
        createMultipleRows();
    }
}

function createMultipleRows() {
    const count = parseInt(document.getElementById('rowCount').value);
    if (count && count > 0) {
        // Clear existing rows
        document.getElementById('part-container').innerHTML = '';
        
        // Create specified number of rows
        for (let i = 0; i < count; i++) {
            addRow();
        }
        
        // Clear the input
        document.getElementById('rowCount').value = '';
    }
}

function addRow() {
    rowCount++;
    const container = document.getElementById('part-container');
    const newRow = document.createElement('div');
    newRow.className = 'part-row';
    
    newRow.innerHTML = `
        <input type="text" class="part-input uppercase-input" style="width: 55px; height: 25px; font-size: 15px;" placeholder="Enter Part">
        <div class="radio-group">
            <div class="radio-option">
                <input type="radio" name="options-${rowCount}" value="Solid" checked>
                <label>Solid</label>
            </div>
            <div class="radio-option">
                <input type="radio" name="options-${rowCount}" value="Print">
                <label>Print</label>
            </div>
            <div class="radio-option">
                <input type="radio" name="options-${rowCount}" value="Emb">
                <label>Emb</label>
            </div>
        </div>
        <button class="add-btn" onclick="addRow()">+</button>
        <button class="remove-btn" onclick="removeRow(this)">-</button>
    `;
    
    container.appendChild(newRow);

    // Add Enter key event listener to move down to the next text input field
    const partInput = newRow.querySelector('.part-input');
    partInput.addEventListener('keydown', (event) => {

        if (event.key === 'Enter') {
            event.preventDefault();
            moveToNextTextInput(partInput);
        }
    });
}

function moveToNextTextInput(currentInput) {
    const allTextInputs = document.querySelectorAll('.part-input');
    const currentIndex = Array.from(allTextInputs).indexOf(currentInput);
    const nextInput = allTextInputs[currentIndex + 1];
    
    if (nextInput) {
        nextInput.focus();
    }
}

function removeRow(button) {
    const row = button.parentElement;
    const container = document.getElementById('part-container');
    
    // Don't remove if it's the only row
    if (container.children.length > 1) {
        container.removeChild(row);
    }
}


// <!-- Clock update function -->

function updateDigitalClock() {
        const now = new Date();
        let hours = now.getHours();
        let minutes = now.getMinutes();
        let seconds = now.getSeconds();

        // Format time with leading zeros
        hours = hours < 10 ? '0' + hours : hours;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        seconds = seconds < 10 ? '0' + seconds : seconds;

        // Display time in HH:MM:SS format
        const timeString = `${hours}:${minutes}:${seconds}`;
        document.getElementById('timeDisplay').textContent = timeString;

        // Get day name
        const days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        const dayName = days[now.getDay()];
        document.getElementById('dayDisplay').textContent = dayName;
    }

    // Update clock every second
    setInterval(updateDigitalClock, 1000);
    updateDigitalClock();


    // Get today's date in 'YYYY-MM-DD' format
    const today = new Date().toISOString().split('T')[0];
    // Set the date input's value to today's date
    document.getElementById('date').value = today;
